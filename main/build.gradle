plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
}

def buildParams = getGradle().getStartParameter().toString().toLowerCase()

task ensureFiles {
    if (buildParams.contains("ProdRelease".toLowerCase())) {
        println("#### Checking must-have files ####")
        assert file("./src/prod/google-services.json").exists()
        assert file("./src/prod/res/values/config_ad.xml").exists()
        println("#### Must-have files included ####")
    }
}

android {
    compileSdk 33
    buildToolsVersion = "33.0.1"

    defaultConfig {
        applicationId "tw.firemaples.onscreenocr"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 106
        versionName "3.1.20"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "boolean", "DISABLE_LOGGING", "true"
        buildConfigField "boolean", "ENABLE_ADS", "true"
    }

    namespace 'tw.firemaples.onscreenocr'

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
        density {
            // This property is set to true by default.
            enableSplit = false
        }
        abi {
            // This property is set to true by default.
            enableSplit = false
        }
    }

    flavorDimensions += "tier"
    productFlavors {
        dev {
            dimension "tier"
            applicationId "tw.firemaples.onscreenocr_debug"

            buildConfigField "boolean", "DISABLE_LOGGING", "false"
            buildConfigField "boolean", "ENABLE_ADS", "false"
        }
        prod {
            dimension "tier"

            def signGradlePath = System.getenv("ANDROID_SIGN_GRADLE_PATH")
            if (signGradlePath != null) {
                apply from: signGradlePath
                signingConfig signingConfigs.playStore
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        jniLibs {
            pickFirsts += ['lib/*/*.so']
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')

    implementation AndroidX.core.ktx
    implementation AndroidX.appCompat
    implementation Google.android.material
    implementation AndroidX.constraintLayout
    implementation libs.legacy.support.v4
    implementation AndroidX.lifecycle.liveDataKtx
    implementation AndroidX.lifecycle.viewModelKtx
    implementation AndroidX.preference.ktx
    implementation AndroidX.webkit
    //noinspection GradleDynamicVersion
    testImplementation Testing.junit4
    androidTestImplementation AndroidX.test.ext.junit
    androidTestImplementation AndroidX.test.espresso.core

    implementation KotlinX.coroutines.android
    // For using coroutines in tests
    // For runBlockingTest, CoroutineDispatcher etc.
    testImplementation KotlinX.coroutines.test
    // For InstantTaskExecutorRule
    testImplementation AndroidX.archCore.testing

    // Data store - preference
    implementation(AndroidX.dataStore.preferences)

    // Navigation component
    implementation AndroidX.navigation.fragmentKtx
    implementation AndroidX.navigation.uiKtx
    // Feature module Support
    implementation AndroidX.navigation.dynamicFeaturesFragment
    // Testing Navigation
    androidTestImplementation AndroidX.navigation.testing

    // required to avoid crash on Android 12 API 31
    implementation AndroidX.work.runtimeKtx

    // Firebase
    implementation platform(Firebase.bom)
    implementation Firebase.crashlytics
    implementation Firebase.analytics
    //  implementation 'com.google.firebase:firebase-core:_'
    implementation Firebase.remoteConfig
    implementation Firebase.performanceMonitoring

    // Google MLKit - Text recognition v2
    // To recognize Latin script
    implementation Google.mlKit.vision.textRecognition
    // To recognize Chinese script
    implementation Google.mlKit.vision.textRecognition.chinese
    // To recognize Devanagari script
    implementation Google.mlKit.vision.textRecognition.devanagari
    // To recognize Japanese script
    implementation Google.mlKit.vision.textRecognition.japanese
    // To recognize Korean script
    implementation Google.mlKit.vision.textRecognition.korean

    // Google MLKit - Text translate
    implementation Google.mlKit.naturalLanguage.translate

    // Google MLKit - Identify Languages
    implementation Google.mlKit.naturalLanguage.languageIdentification

    // Kotpref
    // core
    implementation libs.kotpref
    // optional, auto initialization module
    implementation libs.initializer
    // optional, support saving enum value and ordinal
    implementation libs.enum.support
    // optional, support saving json string through Gson
    implementation libs.gson.support
    implementation libs.gson
    // optional, support LiveData observable preference
    implementation libs.livedata.support
//    implementation AndroidX.lifecycle.liveData
//    // experimental, preference screen build dsl
//    implementation 'com.chibatching.kotpref:preference-screen-dsl:_'

    // Retrofit
    implementation Square.retrofit2
    implementation Square.retrofit2.converter.gson

    // Tesseract
    implementation libs.tesseract4android
//    implementation 'cz.adaptech:tesseract4android:_'

    // koral--/android-gif-drawable
    implementation libs.android.gif.drawable

//    // Ad network mediation - Mopub
//    implementation('com.mopub:mopub-sdk:+@aar') {
//        transitive = true
//    }
//    implementation('com.mopub:mopub-sdk-banner:+@aar') {
//        transitive = true
//    }
//    // Facebook Ad network - Audience network
//    implementation 'com.facebook.android:audience-network-sdk:_'
//    implementation 'com.mopub.mediation:facebookaudiencenetwork:_'
//    // Google Ad network - Admob
//    implementation libs.play.services.ads
//    implementation 'com.mopub.mediation:admob:_'
//    // Adcolony Ad network
//    implementation 'com.adcolony:sdk:_'
//    implementation 'com.mopub.mediation:adcolony:_'

    // Admob
    implementation libs.play.services.ads
    // Facebook Ad network
    implementation libs.facebook
    // Adcolony Ad network
    implementation libs.adcolony
    // To fix build failed with issue
    // Missing class com.facebook.infer.annotation.Nullsafe (referenced from: com.facebook.ads.NativeAdBase)
    // https://stackoverflow.com/a/74718984/2906153
    implementation libs.infer.annotation

    // TouchImageView
    implementation libs.touchimageview
}
